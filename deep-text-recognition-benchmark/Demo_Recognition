{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Demo_Recognition","provenance":[],"authorship_tag":"ABX9TyO5taX1PFYdOixRBkmXGhRm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"THtocNKKuPUw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637326168720,"user_tz":0,"elapsed":30691,"user":{"displayName":"Cheikh Touré","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09030174004710770840"}},"outputId":"35f36df7-fa26-4566-d51f-d92b3f6997ce"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JLp3xn5ku8Sw","executionInfo":{"status":"ok","timestamp":1637326175371,"user_tz":0,"elapsed":334,"user":{"displayName":"Cheikh Touré","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09030174004710770840"}},"outputId":"27fd382f-81a6-4d7e-eae5-627cb922fa67"},"source":["%cd drive/MyDrive/deep-text-recognition-benchmark/"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/deep-text-recognition-benchmark\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UzOUZf3fGLNL","executionInfo":{"status":"ok","timestamp":1637326179181,"user_tz":0,"elapsed":645,"user":{"displayName":"Cheikh Touré","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09030174004710770840"}},"outputId":"85058007-6eee-4fed-97f1-1dab9e228c26"},"source":["%%writefile inference.py\n","\n","import string\n","import argparse\n","\n","import torch\n","import torch.backends.cudnn as cudnn\n","import torch.utils.data\n","import torch.nn.functional as F\n","\n","from utils import CTCLabelConverter, AttnLabelConverter\n","from dataset import ResizeNormalize\n","from model import Model\n","from PIL import Image\n","import torchvision.transforms as transforms\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","\n","def img_to_string(img):\n","  \"\"\"\n","  im: str (path) or PIL image  \n","\n","  \"\"\"\n","  opt=argparse.Namespace()\n","\n","\n","  opt.FeatureExtraction='ResNet'\n","  opt.PAD=False\n","  opt.Prediction='Attn'\n","  opt.SequenceModeling='BiLSTM'\n","  opt.Transformation='TPS'\n","  opt.batch_max_length=60\n","  opt.batch_size=1\n","  opt.character='0123456789<abcdefghijklmnopqrstuvwxyz'\n","  opt.hidden_size=256\n","  opt.imgH=32\n","  opt.imgW=250\n","  opt.input_channel=1\n","  opt.num_fiducial=20\n","  opt.output_channel=512\n","  opt.rgb=True\n","  opt.saved_model='saved_models/TPS-ResNet-BiLSTM-Attn-Seed1111/best_accuracy.pth'\n","  opt.sensitive=False\n","  opt.workers=4\n","\n","\n","\n","\n","  \"\"\" model configuration \"\"\"\n","\n","  converter = AttnLabelConverter(opt.character)\n","  opt.num_class = len(converter.character)\n","\n","  if opt.rgb:\n","      opt.input_channel = 3\n","  model = Model(opt)\n","\n","  print('model input parameters', opt.imgH, opt.imgW, opt.num_fiducial, opt.input_channel, opt.output_channel,\n","          opt.hidden_size, opt.num_class, opt.batch_max_length, opt.Transformation, opt.FeatureExtraction,\n","          opt.SequenceModeling, opt.Prediction)\n","\n","  model = torch.nn.DataParallel(model).to(device)\n","\n","  #load model\n","  print('loading pretrained model from %s' % opt.saved_model)\n","  model.load_state_dict(torch.load(opt.saved_model, map_location=device))\n","  model.eval()\n","\n","\n","\n","\n","  \"\"\" Prepare Image \"\"\"\n","  try:\n","    if isinstance(img, str):\n","      img=Image.open(img).convert('RGB')\n","    else:\n","      img=img.convert('RGB')\n","  except IOError:\n","    print('Corrupted Image')     \n","\n","\n","  transform=ResizeNormalize((opt.imgW, opt.imgH))\n","  image_tensor=transform(img).unsqueeze(0)\n","\n","\n","  \"\"\" Prediction \"\"\"\n","\n","  with torch.no_grad():\n","    batch_size=opt.batch_size\n","    image=image_tensor.to(device)\n","\n","    #max length prediction\n","    length_for_pred = torch.IntTensor([opt.batch_max_length] * batch_size).to(device)\n","    text_for_pred = torch.LongTensor(batch_size, opt.batch_max_length + 1).fill_(0).to(device)\n","    preds = model(image, text_for_pred, is_train=False)\n","\n","    # select max probabilty (greedy decoding) then decode index to character\n","    _, preds_index = preds.max(2)\n","    preds_str = converter.decode(preds_index, length_for_pred)\n","\n","\n","    preds_prob = F.softmax(preds, dim=2)\n","    preds_max_prob, _ = preds_prob.max(dim=2)\n","\n","\n","\n","    pred_EOS = preds_str[0].find('[s]')\n","    pred = preds_str[0][:pred_EOS]  # prune after \"end of sentence\" token ([s])\n","\n","\n","    pred_max_prob = preds_max_prob[0][:pred_EOS]\n","    confidence_score = pred_max_prob.cumprod(dim=0)[-1]\n","\n","\n","  return pred, confidence_score\n","\n","\n","\n"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting inference.py\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3uBHAckMNvs","executionInfo":{"status":"ok","timestamp":1637326241287,"user_tz":0,"elapsed":5294,"user":{"displayName":"Cheikh Touré","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09030174004710770840"}},"outputId":"61cd2744-8071-47f0-b4df-60672955026d"},"source":["from inference import img_to_string\n","from PIL import Image\n","\n","im_path='demo_image2/demo_im/crop_1.jpg'\n","\n","\n","im=Image.open(im_path)\n","\n","pred, score=img_to_string(im)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["model input parameters 32 250 20 3 512 256 39 60 TPS ResNet BiLSTM Attn\n","loading pretrained model from saved_models/TPS-ResNet-BiLSTM-Attn-Seed1111/best_accuracy.pth\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m1fvsEkL_z2Q","executionInfo":{"status":"ok","timestamp":1637326277810,"user_tz":0,"elapsed":260,"user":{"displayName":"Cheikh Touré","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09030174004710770840"}},"outputId":"8292910a-ca5e-46ec-8e13-e12689383794"},"source":["print(pred)\n","print('------------')\n","print(score.item())"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["8208204f2706133sen<<<<<<<<<<<6\n","------------\n","0.9995837807655334\n"]}]}]}